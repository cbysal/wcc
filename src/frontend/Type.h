#ifndef __TYPE_H__
#define __TYPE_H__

#include <string>
#include <unordered_map>

using namespace std;

enum Type {
  ARRAY,
  ASSIGN,
  ASSIGN_STMT,
  BINARY_EXP,
  BLANK_STMT,
  BLOCK,
  BREAK,
  BREAK_STMT,
  COMMA,
  CONST,
  CONST_DEF,
  CONST_INIT_VAL,
  CONTINUE,
  CONTINUE_STMT,
  DIV,
  ELSE,
  EQ,
  ERR,
  EXP_STMT,
  FLOAT,
  FLOAT_LITERAL,
  FUNC,
  FUNC_CALL,
  FUNC_DEF,
  FUNC_PARAM,
  GE,
  GT,
  ID,
  IF,
  IF_STMT,
  INIT_VAL,
  INT,
  INT_LITERAL,
  LB,
  LC,
  LE,
  LP,
  LT,
  L_AND,
  L_NOT,
  L_OR,
  L_VAL,
  MINUS,
  MOD,
  MUL,
  NE,
  PARAM,
  PLUS,
  RB,
  RC,
  RETURN,
  RETURN_STMT,
  ROOT,
  RP,
  SEMICOLON,
  UNARY_EXP,
  VAL,
  VAR,
  VAR_DEF,
  VOID,
  WHILE,
  WHILE_STMT
};

const unordered_map<Type, string> TYPE_STR = {{ASSIGN, "ASSIGN"},
                                              {BREAK, "BREAK"},
                                              {COMMA, "COMMA"},
                                              {CONST, "CONST"},
                                              {CONTINUE, "CONTINUE"},
                                              {DIV, "DIV"},
                                              {ELSE, "ELSE"},
                                              {EQ, "EQ"},
                                              {ERR, "ERR"},
                                              {FLOAT, "FLOAT"},
                                              {FLOAT_LITERAL, "FLOAT_LITERAL"},
                                              {FUNC, "FUNC"},
                                              {GE, "GE"},
                                              {GT, "GT"},
                                              {ID, "ID"},
                                              {IF, "IF"},
                                              {INT, "INT"},
                                              {INT_LITERAL, "INT_LITERAL"},
                                              {LB, "LB"},
                                              {LC, "LC"},
                                              {LE, "LE"},
                                              {LP, "LP"},
                                              {LT, "LT"},
                                              {L_AND, "L_AND"},
                                              {L_NOT, "L_NOT"},
                                              {L_OR, "L_OR"},
                                              {MINUS, "MINUS"},
                                              {MOD, "MOD"},
                                              {MUL, "MUL"},
                                              {NE, "NE"},
                                              {PARAM, "PARAM"},
                                              {PLUS, "PLUS"},
                                              {RB, "RB"},
                                              {RC, "RC"},
                                              {RETURN, "RETURN"},
                                              {RP, "RP"},
                                              {SEMICOLON, "SEMICOLON"},
                                              {VAR, "VAR"},
                                              {VOID, "VOID"},
                                              {WHILE, "WHILE"}};

#endif